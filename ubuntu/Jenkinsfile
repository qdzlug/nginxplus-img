pipeline {
  agent {
    node {
      label 'imagebuild'
    }
  }
  stages {
    stage('Checkout Scm') {
      steps {
      checkout([$class: 'GitSCM', branches: [[name: '**']], extensions: [[$class: 'PerBuildTag']],
                userRemoteConfigs: [[url: 'https://github.com/qdzlug/nginxplus-img']]])
      }
    }

    stage('Configure Environment') {
      steps {
        sh '''sudo apt -y install virtualenvwrapper qemu-utils python3-diskimage-builder libguestfs-tools
        virtualenv $WORKSPACE/dib-elements
        . $WORKSPACE/dib-elements/bin/activate
        pip install diskimage-builder
        '''
      }
    }

    stage('Build Image') {
      steps {
       configFileProvider([configFile(fileId: '0a0b590a-38b6-44b1-988c-1fd78d4fd7fc', targetLocation: 'ubuntu/elements/nginx-plus/static/etc/ssl/nginx/nginx-repo.crt',
                           variable: 'NGINX_CERT'), configFile(fileId: 'e8bd0df6-0d9a-4564-b36c-844afd6c64d0',
                           targetLocation: 'ubuntu/elements/nginx-plus/static/etc/ssl/nginx/nginx-repo.key', variable: 'NGINX_KEY')])
        {
          sh '''
          . $WORKSPACE/dib-elements/bin/activate
          export DIB_RELEASE=focal
          export DIB_DEBUG_TRACE=1
          export DIB_DEV_USER_USERNAME=devuser
          export DIB_DEV_USER_SHELL=/bin/bash
          export DIB_DEV_USER_PWDLESS_SUDO=yes
          export DIB_DEV_USER_PASSWORD=password
          export ELEMENTS_PATH=$WORKSPACE/ubuntu/elements
          disk-image-create -a amd64 -o nginxplus-ubuntu-$BUILD_ID.qcow2 block-device-mbr nginx-plus
          '''
        }
      }
    }

#    stage ('Inject Users') {
        #steps {
            #sh '''
            #virt-customize -a nginxplus-ubuntu-$BUILD_ID.qcow2 --run-command "adduser nplus"
            #virt-customize -a nginxplus-ubuntu-$BUILD_ID.qcow2 --run-command "echo 'nplus  ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/nplus-sudo"
            #virt-customize -a nginxplus-ubuntu-$BUILD_ID.qcow2 --password user1:password:NginxPlus2022
            #'''
        #}
    #}

    stage('Archive Image') {
        steps {
            archiveArtifacts artifacts: '*.qcow2', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
        }
    }

    stage('Clean Workspace') {
        steps {
            cleanWs()
        }
    }
  }
}
